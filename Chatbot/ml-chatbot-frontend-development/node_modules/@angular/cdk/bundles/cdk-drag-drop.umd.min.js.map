{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  AfterContentInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    /** Element that the drop list is attached to. */\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    @Optional() @Inject(DOCUMENT) _document?: any,\n\n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n    // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop,\n    private _changeDetectorRef?: ChangeDetectorRef) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n"],"names":["this","connectedTo","orientation","id","_uniqueIdCounter","_disabled","enterPredicate","dropped","EventEmitter","entered","exited","sorted","_dropListRef","dragDrop","createDropList","element","DropListRef","dragDropRegistry","_document","document","data","drag","drop","_this","_syncInputs","_handleEvents","CdkDropList","_dropLists","push","_group","_items","add","Object","defineProperty","prototype","disabled","value","coerceBooleanProperty","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","_destroyed","subscribe","items","withItems","map","_dragRef","ngOnDestroy","index","indexOf","splice","delete","dispose","next","complete","start","item","currentIndex","previousContainer","isPointerOverContainer","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","ref","_dir","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","lockAxis","filter","withOrientation","_changeDetectorRef","markForCheck","event","emit","container","previousIndex","type","Directive","args","selector","exportAs","providers","provide","CdkDropListGroup","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","DragDrop","ContentChildren","forwardRef","CdkDrag","descendants","Input","Output","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","removeAttribute","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","startsWith","moveItemInArray","array","fromIndex","toIndex","from","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","started","released","ended","moved","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","withBoundaryElement","boundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","clear","_nextSibling","reset","disableHandle","enableHandle","direction","_withDropContainer","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","Date","now","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_activeDraggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","newPositionReference","_reset","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","NgZone","DEFAULT_CONFIG","createDrag","ViewportRuler","CDK_DROP_LIST","InjectionToken","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","CDK_DRAG_CONFIG","factory","dropContainer","_viewContainerRef","viewportRuler","movedEvent","ngAfterViewInit","onStable","asObservable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","firstChange","rootElementSelector","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundaryElementSelector","dir","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","ViewContainerRef","ContentChild"],"mappings":"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"}